1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Технології для написання серверної частини були відібрані на підставі потреб системи та особистого досвіду. Отже, для цієї частини була обрана платформа .NET 8. REST-специфікація орієнтується на архітектурний стиль, який акцентує використання ресурсів та їх ідентифікацію через URI. Були використані контролери ASP.NET Core для створення RESTful веб-сервісів, що дотримуються принципів архітектурного стилю REST.
Для бази даних була обрана PostgreSQL через її надійність та високу продуктивності у роботі з даними. PostgreSQL надає потужні можливості роботи з реляційними даними та дозволяє ефективно масштабувати систему, забезпечуючи швидкий доступ до інформації. Серверна частина взаємодіє з базою даних за допомогою об’єктно-реляційного перетворювача Entity Framework Core.
Комунікація між сервером і клієнтською частиною, включаючи мобільний застосунок, також здійснюється за допомогою REST API. Більш детальний огляд взаємодії серверної частини з іншими елементами системи можна знайти на UML-діаграмі розгортання.
Комунікація між сервером IoT пристроєм, здійснюється за допомогою протоколу MQTT. Пошук пральних машин, зміна параметрів їх роботи та отримання параметрів, зчитаних з датчиків, відбувається за допомогою публікації повідомлень за певними темами, що були погоджені раніше. Ці запити надсилаються до MQTT брокера – сервера, що комутує їх до потрібного пристрою. Кожен із вузлів підписується на теми, з яких хоче отримувати повідомлення.
Архітектура системи, ґрунтується на ключових принципах "Чистої Архітектури" відповідно до однойменної книги Роберта Сесіла Мартіна. З метою досягнення максимальної ефективності та лаконічності функціонування програмного комплексу, він був структурований у формі п'яти основних проєктів: Api, Application, Infrastructure, Persietence, Domain.
Кожен із зазначених проєктів відповідав за конкретний аспект системи, чітко визначаючи свою роль та функціональні обов'язки. Проєкт Api відповідає за представлення інформації користувачу, у нашому випадку через RESTful Web API. Application реалізує бізнес-логіку та основні функціональні можливості системи. Саме в цьому проєкті відбувається оброблення запитів користувача, формування та повернення інформації. Infrastructure забезпечує інфраструктурні потреби програмного забезпечення, включаючи комунікацію між різними компонентами системи та їх взаємодію з зовнішніми системами, наприклад: комунікація із системою ідентифікації користувачів, що зберігає та керує даними про облікові записи, взаємодія із сервером електронної пошти. Persistence відповідає за роботу з базами даних та доступ до інформації. Він допомагає абстрагувати логіку доступу до даних, що робить систему незалежною від вибору СУБД. Нарешті, Domain сконцентрований на бізнес-логіці, моделях даних та специфічних вимогах домену програмного продукту.
Обрана архітектура дозволила ефективно розподілити відповідальність між окремими компонентами системи, забезпечивши їхню модульність та можливість взаємодії без надмірних залежностей. Кожен проєкт був організований таким чином, щоб мати чітку структуру та відокремленість від інших, сприяючи підтримці, розширенню та розвитку системи в майбутньому.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання показує як елементи або компоненти системи розміщуються на апаратному забезпеченні та як вони взаємодіють між собою. Використовуючи діаграму розгортання, інженери та розробники можуть розуміти, як програмне забезпечення взаємодіє з обладнанням, а також визначити вимоги до виконавчого середовища.
Система зберігає всі данні у реляційній базі даних "PostgreSQL". Цю БД було обрано через її відкриту природу та наявність великої кількості доповнень. 
Доступ до бази даних відбувається через .NET 8 застосунок, серверну частину, що відповідає за основну логіку системи. Застосунок взаємодії з MQTT брокером "Bifromq" для обміну повідомленнями з IoT пристроями. 
Веб-застосунок використовує Javascript бібліотеку React і взаємодіє з серверною частиною за допомогою REST API. Його можна використовувати з будь-якого пристрою, що має встановлений браузер та доступ до Інтернету. Застосунок містить клієнтську частину та панель адміністратора.
Серверну частину, веб-застосунок та базу даних розгорнуто на окремих LXC контейнерах на платформі віртуалізації "Proxmox". Образи контейнерів зберігаються на зашифрованому диску за допомогою файлової системи ZFS. Також використовується технологія конування даних на декілька дисків для уникнення їх втрати.
Мобільний застосунок розроблено з використанням Kotlin та фреймворку Compose. Застосунок можливо завантажити на будь-який пристрій з ОС "Android".

3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

UML-діаграма прецедентів є інструментом моделювання, який використовується для візуалізації функціональності системи з точки зору користувача.
Головним актором у системі є "Користувач". "Користувач" має можливість реєстрації та подальшого входу у систему, що надає йому можливість отримувати дані з датчиків пральної машини та зміни режиму її роботи.
Кожен "Користувач" має доступ до особистого кабінету де він може редагувати конфіденційні дані, такі як електрона пошта та пароль. 
Зокрема актора "Користувач" у системі також присутні актор "Адміністратор". "Адміністратор" має доступ до всіх даних системи та має можливості редагування та видалення цієї інформації.
Також основною дією адміністратора є пошук пральних машин у мережі да додання їх до бази даних.

4 ПОБУДОВА ER-ДІАГРАМИ

ER-модель містить такі сутності:
    - Користувач. Містить інформацію про користувачів додатка включаючи;
    - Роль користувач. Сутність, що створює зв'язок "багато до багатьох" в реляційних базах даних;
    - Роль. Відповідають за доступний користувачу функціонал;
    - Токен оновлення. Використовується для JWT авторизації користувача;
    - Група пристроїв. Групування IoT пристроїв за описом місця розташування;
    - Пральна машина. Зберігає дані про пральні машини. За унікальним ідентифікатором можна зробити запит до MQTT серверу;

5 СПЕЦИФІКАЦІЯ REST

Сутність
HTTP Метод
Посилання
Дія
Пральна машина
POST
/washingMachines
Створення пральної машини
GET
/washingMachines
Отримання сторінок пральних машин
PUT
/washingMachines
Оновлення пральної машини
DELETE
/washingMachines
Видалення пральної машини
GET
/washingMachines/{id}
Отримання пральної машини
GET
/washingMachines/discover
Отримання пральних машин, підключених до мережі
POST
/washingMachines/changeState
Зміна режиму прання
GET
/washingMachines/{id}/streamStatus
Отримання даних з датчиків
Група пристроїв
POST
/deviceGroups
Створення групи пристроїв
GET
/deviceGroups
Отримання сторінок груп пристроїв
PUT
/deviceGroups
Оновлення групи пристроїв
DELETE
/deviceGroups
Видалення групи пристроїв
GET
/deviceGroups/{id}
Отримання групи пристроїв
Аутен-тифікація
POST
/identity/register
Реєстрація облікового запису
POST
/identity/login
Отримання токена аутентифікації
POST
/identity/renewAccessToken
Оновлення токена аутентифікації
POST
/identity/revokeRefreshToken
Скасування токена оновлення

6 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

На діаграми компонентів відображена структура системи, яка ґрунтується на ключових принципах "Чистої Архітектури" відповідно до однойменної книги Роберта Сесіла Мартіна. З метою досягнення максимальної ефективності та лаконічності функціонування програмного комплексу, він був структурований у формі п'яти основних проєктів: Api, Application, Infrastructure, Persistence, Domain. Проєкт Application залежить від сторонніх бібліотек таких, як: AutoMapper, MQTTnet, MediatR та FluentValidation. Persistence імпортує абстракції об'єктно-реляційного перетворювача EntityFramework та конкретного коннектора до бази даних PostgreSQL. Infrastructure залежить від пакету Microsoft.AspNetCore.Identity, що надає моделі даних та класи для створення системи автентифікації та авторизації.

ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена та протестована серверна частина програмної системи. Також були створені діаграми для кращого осмислення предметної області та архітектури системи. Додатково був підготовлений відеоролик, що демонструє функції системи: https://youtu.be/bNm2Z4PvmZk
