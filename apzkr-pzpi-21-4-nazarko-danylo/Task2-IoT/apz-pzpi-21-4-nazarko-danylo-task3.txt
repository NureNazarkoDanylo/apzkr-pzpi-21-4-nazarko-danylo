1 МЕТА РОБОТИ

Розробити програмне забезпечення для IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем. Пристрій повинен бути частиною програмної системи і повинен взаємодіяти з нею. Програмне забезпечення повинно реалізовувати розширену функціональність, що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з  іншими частинами системи Створити UML діаграми прецедентів, взаємодії, діяльності та компонентів за обраною темою.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Для опису поведінки системи використовується UML діаграма прецедентів. Повну діаграму системи було наведено в попередній лабораторній роботі. На рисунку Б.1 додатку Б зображено діаграму прецедентів тільки для IoT пристроїв системи. Користувач може налаштовувати систему, зберігати та відновлювати файл конфігурації, подавати команди зміни режиму роботи пральної машини, отримувати дані з датчиків. Система відповідає на запити MQTT брокера.
Діаграма взаємодії, що показана на рисунку Б.2 додатку Б, відображає перебіг процесів у формі вузлів активності та контрольних вузлів, які представляють собою різні типи взаємодії, такі як виклик операцій, послідовність подій або паралельні процеси. Кожен вузол активності має діаграму послідовності, що описує кроки виконання активності та взаємодію між різними частинами системи. 
Користувач задає посилання на серер, запускає систему. Пристрій відповідає на запити MQTT брокера. Це відбувається доки система не отримала повідомлення про зупинку роботи.
Діаграма діяльності представляє потоки робочого процесу або операцій 
в системі. Вона відображає послідовність кроків та контрольну структуру, які описують, як діяльності виконуються для досягнення певної мети. На рисунку Б.3 додатку Б наведено діаграму діяльності для роботи точки пристрою.
Процес починається після запуску системи. Пристрій зчитує дані з різних датчиків та відповідає ними. Сервер перевіряє запит та вирішує чи повідомляти клієнта про надходження цих даних.
Діаграма компонентів, що показана на рисунку Б.4 додатку Б, використовується для моделювання фізичної структури системи. Інформацію оброблює одноплатний комп’ютер Raspberry Pi. Він має достатньо обчислювальної потужності для виконання описаних раніше задач, 40 контактів вводу-виводу для контролю датчиків та інших зовнішніх пристроїв та вбудований WiFi.

3 ОПИС ІНЖЕНЕРНИХ РІШЕНЬ
3.1 Високорівнева архітектура та технології

Описана система потребує розробки одного застосунку. Для спрощення розробки та підтримки програмного забезпечення, було прийнято низку загальних рішень.
Застосунок було написано на мові програмування С#, бо вона має велику кількість бібліотек, що спрощує та прискорює процес розробки.
Кожен пристрій потребує встановлення додатків і завантаження конфігурації, що містить посилання на MQTT брокера-для конфігурації використовується JSON файл.
Для комунікації від IoT пристрою до серверної частини використовується протокол MQTT, функціональність клієнта якого реалізована у бібліотеці MQTTnet. Пристрій підписується на загальний топік брокера «devices/discovery», у відповідь на запити до якого інформацію про пристрій, а саме: унікальний ідентифікатор, виробника, серійний номер та назву пральної машини. Також пристрій оброблює запити, що надходять із топіками «devices/*deviceId*/getStatus» та «devices/*deviceId*/changeState». У відповідь на перший надсилає дані з датчиків пральної машини, як-от: режим роботи, температуру води, швидкість обертання мотора та вага вмісту барабану. На другий запит просто змінюється режим роботи без надсилання відповіді. Усі відповіді на запити надсилаються із тим самим топіком. Серверна частина та IoT пристрій розрізняють їх приналежність за структурою посилання. Сервер приймає та оброблює лише ті запити, зо містять JSON об’єкт. IoT пристрою важливий саме топік запиту.

3.2 Потік обробки інформації з датчика

Код, що по казаний у додатку А.1, реалізує IoT пристрій пральної машини, який спілкується з MQTT брокером. Давайте розглянемо основні компоненти та функції:
    1. Підготовка і налаштування сервісів: Код створює об'єкти сервісів для управління температурою води (IWaterTemperatureService), швидкістю мотора (IMotorSpeedService), вагою завантаження (ILoadWeightService), станом кришки (ILidClosedService) та загальним станом пристрою (IStateService). У цьому випадку використовуються заміщені сервіси, що можуть бути корисними для тестування.
    2. Ініціалізація MQTT клієнта: Створюється клієнт MQTT з допомогою MQTTnet бібліотеки. Налаштування клієнта виконується за допомогою MqttClientOptionsBuilder.
    3. Обробники подій MQTT клієнта: Код призначає обробники подій для обробки підключення до брокера, прийому повідомлень та відключення від брокера. Наприклад, відповідно до надісланого повідомлення, викликаються відповідні методи для обробки.
    4. Очікування сигналу зупинки: Код створює CancellationToken, який служить для контролю зупинки роботи пристрою. Обробник зупинки встановлюється для перехоплення сигналу CTRL+C та запуску методу StopMqttClientAsync.
    5. Методи керування MQTT клієнтом: Ці методи відповідають за підключення та відключення клієнта від брокера MQTT. Крім того, вони включають автоматичну спробу підтримувати з'єднання з брокером через TryPingAsync.
    6. Обмін повідомленнями з пристроєм: Код виконує підписку на певні теми для прийому та відправлення повідомлень. В залежності від теми та отриманого повідомлення викликаються відповідні методи обробки.
Усе це дозволяє пральній машині спілкуватися з іншими пристроями чи контролерами через MQTT протокол.

4 ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена та протестована IoT частина програмної системи. Також були створені діаграми для кращого осмислення предметної області та архітектури системи. Додатково був підготовлений відеоролик, що демонструє функції системи: https://youtu.be/bNm2Z4PvmZk
