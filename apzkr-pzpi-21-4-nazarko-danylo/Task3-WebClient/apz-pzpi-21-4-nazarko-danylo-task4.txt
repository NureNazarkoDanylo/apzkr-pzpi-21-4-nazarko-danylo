1 МЕТА РОБОТИ

Мета роботи полягає в створенні веб застосунку програмної системи та створенні звіту, що містить опис інженерних рішень з посиланнями на програмний код. Під час виконання лабораторної роботи має бути розроблено чотири діаграми, а саме: UML діаграма прецедентів, UML діаграма компонентів, UML діаграма пакетів та UML діаграму взаємодії.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Для опису поведінки системи використовується UML діаграма прецедентів. Користувач може отримати дані з датчиків пральної машини та змінити режим її роботи. Адміністратор може додавати, редагувати, оновлювати та видаляти дані пральних машин. Також йому доступний пошук пральних машин у мережі.
Діаграма компонентів, що показана на рисунку А.2 додатку А, використовується для моделювання структури компонентів бібліотеки React. Вона показує як вони складаються для відображення кінцевого результату інтерфейсу системи. Застосунок завантажує компонент «Layout», котрий вже відображує потрібні сторінки. У свою чергу сторінки показують форми, картки та інші компоненти.
Діаграма компонентів, що показана на рисунку А.3 додатку А, показує бібліотеки, які потрібні для коректного функціонування застосунку.
Діаграма взаємодії, що показана на рисунку А.4 додатку А, відображає перебіг процесів у формі вузлів активності та контрольних вузлів, які представляють собою різні типи взаємодії, такі як виклик операцій, послідовність подій або паралельні процеси. Кожен вузол активності має діаграму послідовності, що описує кроки виконання активності та взаємодію між різними частинами системи. 
Користувач входить в систему. Йому надається можливість виконання операцій над пральними машинами, перегляду інформації, що надходить з датчиків та сканувати мережу.

3 ОПИС ІНЖЕНЕРНИХ РІШЕНЬ

3.1 Структура та технології

Веб-застосунок побудовано з використанням сучасних веб-технологій та архітектурних підходів, що забезпечують високу продуктивність, масштабованість та підтримку.
Фронтенд веб-застосунку побудовано на основі фреймворку Next.js, який забезпечує серверний рендеринг і статичну генерацію сторінок. Використання Next.js дозволяє підвищити продуктивність та SEO-оптимізацію завдяки попередньому рендерингу сторінок.
Фронтенд застосунку побудовано на компонентному підході, де кожен компонент є незалежним модулем. Це забезпечує високу модульність та повторне використання коду. Файли компонентів розміщено у відповідних директоріях, таких як _components для кожної функціональної частини застосунку (наприклад, header.tsx, footer.tsx).
Структура директорій:
    • src/app: Основна директорія застосунку, що містить усі компоненти, стилі, бібліотеки та сторінки.
    • _components: Директорія, що містить реюзабельні компоненти інтерфейсу користувача.
    • _lib: Директорія з бібліотеками та утилітами, такими як api для взаємодії з API, context для управління контекстом (наприклад, AuthProvider.tsx), hooks для кастомних хуків.
    • _styles: Директорія зі стилями, розділеними за компонентами.
    • public: Директорія для статичних файлів, доступних напряму з браузера (наприклад, placeholder.svg).
TypeScript: Основна мова програмування для розробки застосунку. Використання TypeScript забезпечує статичну типізацію, що допомагає виявляти помилки на етапі розробки.

3.2 Реєстрація та вхід у систему

При розробці клієнтської частини для сторінок реєстрації та входу головним завданням було забезпечення безпеки та конфіденційності даних користувачів. Щоб ефективно застосувати механізм підтвердження особи на клієнтській стороні, було використано контекст, який служить для глобального зберігання та передачі даних по всьому додатку. У попередній лабораторній роботі для серверної частини використовували JWT токени для автентифікації та авторизації користувачів. Контекст використовувався для відстеження статусу користувача (перевірка автентифікації) та захисту маршрутів, доступ до яких повинен бути обмежений.

3.3 Головний функціонал

Основною сторінкою нашого застосунку є список пральних машин, яка дозволяє користувачеві переглядати всі пральні машини, а також здійснювати пошук і сортування. Для доступу до книжкової полиці на сервер надсилається запит із JWT токеном користувача в заголовку, що забезпечує безпечний доступ до даних і відображення лише його книжок.
Також створено сторінку з детальною інформацією про пральні машини, де користувач може переглядати дані та отримувати статус роботи пральної машини в реальному часі, а саме: етап прання, температуру води, швидкість обертання мотора та ін. Ця сторінка також дозволяє видаляти пральні машини з БД.
За допомогою навігаційного меню користувач може перейти на головну сторінку та сторінку пошуку пральних машин в мережі. Головна сторінка відображається першою після входу користувача у систему.
Сторінка додавання пральних машин має простий інтерфейс. Користувач може ввести виробника, серійний номер, назву та опис пральної машини.

4 ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено клієнтську частину програмної системи, що підтримує роботу клієнтів та забезпечує адміністрування системи. Створено UML діаграми прецедентів, компонентів, пакетів та взаємодії.
